#!/bin/bash

# StreaminDoDo Enhanced Setup Script
# Sets up multistreaming with social media integration and RASA AI chatbot

set -e

echo \"üé¨ StreaminDoDo Enhanced Setup - Multistream with AI Chatbot ü§ñ\"\necho \"============================================================\"\n\n# Color definitions\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${BLUE}$1${NC}\"\n}\n\n# Check if running as root\nif [[ $EUID -eq 0 ]]; then\n   print_error \"This script should not be run as root\"\n   exit 1\nfi\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Check prerequisites\nprint_header \"\\nüîç Checking Prerequisites...\"\n\n# Check Node.js\nif command_exists node; then\n    NODE_VERSION=$(node --version)\n    print_status \"Node.js found: $NODE_VERSION\"\n    \n    # Check if version is 16 or higher\n    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')\n    if [ \"$NODE_MAJOR\" -lt 16 ]; then\n        print_error \"Node.js version 16 or higher is required. Current: $NODE_VERSION\"\n        exit 1\n    fi\nelse\n    print_error \"Node.js not found. Please install Node.js 16 or higher.\"\n    exit 1\nfi\n\n# Check npm\nif command_exists npm; then\n    NPM_VERSION=$(npm --version)\n    print_status \"npm found: $NPM_VERSION\"\nelse\n    print_error \"npm not found. Please install npm.\"\n    exit 1\nfi\n\n# Check Docker (optional)\nif command_exists docker; then\n    print_status \"Docker found: $(docker --version)\"\n    DOCKER_AVAILABLE=true\nelse\n    print_warning \"Docker not found. Docker deployment will not be available.\"\n    DOCKER_AVAILABLE=false\nfi\n\n# Check Docker Compose (optional)\nif command_exists docker-compose; then\n    print_status \"Docker Compose found: $(docker-compose --version)\"\n    DOCKER_COMPOSE_AVAILABLE=true\nelif command_exists docker && docker compose version >/dev/null 2>&1; then\n    print_status \"Docker Compose (v2) found: $(docker compose version)\"\n    DOCKER_COMPOSE_AVAILABLE=true\n    DOCKER_COMPOSE_CMD=\"docker compose\"\nelse\n    print_warning \"Docker Compose not found. Docker deployment will not be available.\"\n    DOCKER_COMPOSE_AVAILABLE=false\n    DOCKER_COMPOSE_CMD=\"docker-compose\"\nfi\n\n# Check FFmpeg\nif command_exists ffmpeg; then\n    print_status \"FFmpeg found: $(ffmpeg -version | head -n1)\"\nelse\n    print_warning \"FFmpeg not found. Streaming functionality may be limited.\"\n    print_status \"Install FFmpeg with: sudo apt install ffmpeg (Ubuntu/Debian) or brew install ffmpeg (macOS)\"\nfi\n\n# Check Python (for RASA)\nif command_exists python3; then\n    PYTHON_VERSION=$(python3 --version)\n    print_status \"Python found: $PYTHON_VERSION\"\n    PYTHON_AVAILABLE=true\nelse\n    print_warning \"Python3 not found. RASA chatbot will not be available for local installation.\"\n    PYTHON_AVAILABLE=false\nfi\n\n# Check pip (for RASA)\nif command_exists pip3; then\n    print_status \"pip3 found: $(pip3 --version | cut -d' ' -f1-2)\"\n    PIP_AVAILABLE=true\nelse\n    print_warning \"pip3 not found. RASA chatbot will not be available for local installation.\"\n    PIP_AVAILABLE=false\nfi\n\nprint_header \"\\nüì¶ Installing Dependencies...\"\n\n# Install Node.js dependencies\nprint_status \"Installing Node.js dependencies...\"\nnpm install\n\nif [ $? -eq 0 ]; then\n    print_status \"Node.js dependencies installed successfully\"\nelse\n    print_error \"Failed to install Node.js dependencies\"\n    exit 1\nfi\n\n# Environment setup\nprint_header \"\\n‚öôÔ∏è Setting up Environment...\"\n\nif [ ! -f \".env\" ]; then\n    print_status \"Creating .env file from template...\"\n    cp .env.example .env\n    print_status \".env file created. Please edit it with your credentials.\"\nelse\n    print_warning \".env file already exists. Skipping creation.\"\nfi\n\n# Create necessary directories\nprint_status \"Creating necessary directories...\"\nmkdir -p logs\nmkdir -p data\nmkdir -p config\nmkdir -p rasa/models\nmkdir -p rasa/data\nmkdir -p ssl\n\n# Set permissions\nchmod 755 logs data config rasa/models rasa/data ssl\n\nprint_header \"\\nü§ñ RASA Chatbot Setup...\"\n\n# Ask user about RASA setup preference\necho \"Choose RASA setup option:\"\necho \"1) Docker (Recommended - no local Python setup needed)\"\necho \"2) Local installation (requires Python 3.7+)\"\necho \"3) Skip RASA setup\"\nread -p \"Enter your choice (1-3): \" RASA_CHOICE\n\ncase $RASA_CHOICE in\n    1)\n        if [ \"$DOCKER_AVAILABLE\" = true ]; then\n            print_status \"RASA will be set up using Docker\"\n            echo \"CHATBOT_ENABLED=true\" >> .env\n            echo \"RASA_API_URL=http://rasa-chatbot:5005\" >> .env\n        else\n            print_error \"Docker not available. Please choose option 2 or 3.\"\n            exit 1\n        fi\n        ;;\n    2)\n        if [ \"$PYTHON_AVAILABLE\" = true ] && [ \"$PIP_AVAILABLE\" = true ]; then\n            print_status \"Setting up RASA locally...\"\n            \n            # Install RASA\n            print_status \"Installing RASA (this may take a few minutes)...\"\n            pip3 install rasa\n            \n            if [ $? -eq 0 ]; then\n                print_status \"RASA installed successfully\"\n                \n                # Train initial model\n                print_status \"Training initial RASA model...\"\n                cd rasa\n                rasa train\n                cd ..\n                \n                echo \"CHATBOT_ENABLED=true\" >> .env\n                echo \"RASA_API_URL=http://localhost:5005\" >> .env\n            else\n                print_error \"Failed to install RASA\"\n                echo \"CHATBOT_ENABLED=false\" >> .env\n            fi\n        else\n            print_error \"Python3 and pip3 are required for local RASA installation\"\n            exit 1\n        fi\n        ;;\n    3)\n        print_status \"Skipping RASA setup\"\n        echo \"CHATBOT_ENABLED=false\" >> .env\n        ;;\n    *)\n        print_error \"Invalid choice. Please run the script again.\"\n        exit 1\n        ;;\nesac\n\nprint_header \"\\nüåê Platform Configuration...\"\n\nprint_status \"The following platforms are supported:\"\necho \"  ‚Ä¢ Twitch (streaming + chat)\"\necho \"  ‚Ä¢ YouTube (streaming + chat)\"\necho \"  ‚Ä¢ Facebook (streaming + messaging)\"\necho \"  ‚Ä¢ Instagram (messaging only)\"\necho \"  ‚Ä¢ TikTok (limited support)\"\necho \"  ‚Ä¢ LinkedIn (messaging only)\"\necho \"  ‚Ä¢ Twitter/X (messaging only)\"\necho \"  ‚Ä¢ Discord (bot + voice streaming)\"\necho \"  ‚Ä¢ Telegram (bot messaging)\"\necho \"  ‚Ä¢ Kick, Rumble, Odysee (streaming only)\"\n\nprint_warning \"\\nIMPORTANT: Edit the .env file to add your API keys and credentials for each platform you want to use.\"\n\nprint_header \"\\nüöÄ Deployment Options...\"\n\necho \"Choose deployment method:\"\necho \"1) Local development (Node.js only)\"\necho \"2) Docker Compose (Recommended for production)\"\necho \"3) Docker Compose with all services (includes database)\"\nread -p \"Enter your choice (1-3): \" DEPLOY_CHOICE\n\ncase $DEPLOY_CHOICE in\n    1)\n        print_status \"Local development setup ready\"\n        print_status \"Start the server with: npm start\"\n        if [ \"$RASA_CHOICE\" = \"2\" ]; then\n            print_status \"Start RASA server with: npm run rasa:run\"\n        fi\n        ;;\n    2)\n        if [ \"$DOCKER_COMPOSE_AVAILABLE\" = true ]; then\n            print_status \"Building Docker images...\"\n            $DOCKER_COMPOSE_CMD build\n            \n            print_status \"Docker setup complete\"\n            print_status \"Start services with: $DOCKER_COMPOSE_CMD up -d\"\n        else\n            print_error \"Docker Compose not available\"\n            exit 1\n        fi\n        ;;\n    3)\n        if [ \"$DOCKER_COMPOSE_AVAILABLE\" = true ]; then\n            print_status \"Building Docker images...\"\n            $DOCKER_COMPOSE_CMD build\n            \n            print_status \"Docker setup with database complete\"\n            print_status \"Start all services with: $DOCKER_COMPOSE_CMD --profile database up -d\"\n        else\n            print_error \"Docker Compose not available\"\n            exit 1\n        fi\n        ;;\n    *)\n        print_error \"Invalid choice\"\n        exit 1\n        ;;\nesac\n\nprint_header \"\\n‚úÖ Setup Complete!\"\n\nprint_status \"StreaminDoDo Enhanced is now set up with the following features:\"\necho \"  ‚úÖ Multi-platform streaming (Twitch, YouTube, Facebook, etc.)\"\necho \"  ‚úÖ Social media chat integration\"\nif [ \"$RASA_CHOICE\" != \"3\" ]; then\n    echo \"  ‚úÖ AI-powered chatbot with RASA\"\nfi\necho \"  ‚úÖ Real-time web dashboard\"\necho \"  ‚úÖ WebSocket-based live updates\"\necho \"  ‚úÖ Health monitoring and logging\"\n\nprint_header \"\\nüìã Next Steps:\"\necho \"1. Edit the .env file with your streaming credentials and API keys\"\necho \"2. Configure your OBS Studio:\"\necho \"   - Server: rtmp://localhost:1935/live\"\necho \"   - Stream Key: any unique identifier\"\nif [ \"$DEPLOY_CHOICE\" = \"1\" ]; then\n    echo \"3. Start the application: npm start\"\n    if [ \"$RASA_CHOICE\" = \"2\" ]; then\n        echo \"4. In another terminal, start RASA: npm run rasa:run\"\n    fi\nelse\n    echo \"3. Start Docker services: $DOCKER_COMPOSE_CMD up -d\"\nfi\necho \"4. Access the dashboard: http://localhost:3000\"\necho \"5. Start streaming from OBS Studio\"\n\nprint_header \"\\nüìö Documentation:\"\necho \"‚Ä¢ README.md - General setup and usage\"\necho \"‚Ä¢ GITHUB_SETUP.md - GitHub integration guide\"\necho \"‚Ä¢ CONTRIBUTING.md - Development guidelines\"\necho \"‚Ä¢ rasa/ - Chatbot training data and configuration\"\n\nprint_header \"\\nüîß Troubleshooting:\"\necho \"‚Ä¢ Check logs in the logs/ directory\"\necho \"‚Ä¢ Verify .env configuration\"\necho \"‚Ä¢ Ensure all required ports are available (3000, 1935, 5005, 5055)\"\necho \"‚Ä¢ For Docker issues, check: docker logs obs-multistream\"\n\nprint_warning \"\\n‚ö†Ô∏è Security Note:\"\necho \"Remember to keep your API keys and credentials secure.\"\necho \"Never commit the .env file to version control.\"\n\nprint_status \"\\nüéâ Happy streaming! Your multistream setup with AI chatbot is ready!\"\n\nexit 0